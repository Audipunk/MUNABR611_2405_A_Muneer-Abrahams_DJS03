-DJS04-
**Steps for Setting Up the BookPreview Component**

1. Initialize Component: Create a constructor to set up the component.
2. Attach Shadow DOM: Encapsulate styles and structure within a shadow DOM.
3. Handle Lifecycle Events: Use connectedCallback to trigger component setup when added to the DOM.
4. Render Initial UI: Call the render method to generate HTML and styles.
5. Define Reactive Attributes: Specify which attributes (title, author, image, id) should trigger updates.
6. Listen for Attribute Changes: Use attributeChangedCallback to detect updates.
7. Update Properties: Modify internal properties when attributes change.
8. Re-render on Updates: Ensure the component reflects the latest data.
9. Generate HTML & Styles: Use the render method to structure the UI dynamically.
10. Register as a Custom Element: Define the new web component using customElements.define().


-DIS03-
**Code Explanation**

1. Function Segmentation
The code is broken into small, single-responsibility functions like populateCardWindow, populateSelectionMenu, and setTheme.
This makes the code easier to read, maintain, and debug.

2. Use of Parameters Instead of Global Variables
Functions rely on parameters instead of global variables, making them pure.
This helps with predictability, testability, and avoids unintended side effects.

3. JSDoc Comments for Documentation
JSDoc comments have been added to clearly document functions.
This allows developers to quickly understand what each function does, its expected parameters, and return values.

4. Modular Design
The code follows a modular approach, meaning different parts (like the theme system or book display logic) can be modified independently.
This improves scalability and maintainability.

5. Theming System
The function setTheme dynamically adjusts colors based on user preferences.
New themes can be added without modifying other parts of the code, making it extensible.

6. Code Reusability & DRY Principle
Event listeners are abstracted into openWindowHandler and closeWindowHandler, making them reusable across different modals.
This avoids code duplication and keeps the logic centralized.

**Challenges Faced & How They Were Overcome**
Initially, patterns were not obvious, but by experimenting with the code, opportunities for modularization became clear.
Breaking down large blocks of code into smaller functions improved readability and maintainability.

